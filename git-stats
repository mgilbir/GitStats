#!/usr/bin/env python
# Copyright (c) 2007-2010 Heikki Hokkanen <hoxu@users.sf.net> & others (see doc/author.txt)
# GPLv2 / GPLv3
import getopt
import os
import sys
import time

#Our project imports
from GitDataCollector import GitDataCollector
from HTMLReportCreator import HTMLReportCreator
import CommandLineProcessor

exectime_internal = 0.0
time_start = time.time()

# By default, gnuplot is searched from path, but can be overridden with the
# environment variable "GNUPLOT"
gnuplot_cmd = 'gnuplot'
if 'GNUPLOT' in os.environ:
	gnuplot_cmd = os.environ['GNUPLOT']

conf = {
	'max_domains': 10,
	'max_ext_length': 10,
	'style': 'gitstats.css',
	'max_authors': 20,
	'gnuplot_cmd': gnuplot_cmd,
	'image_type': 'svg',  # everything that gnuplot accepts, I guess 
	'gnuplot_image_specifications': {'svg':'','png':'transparent'}
}

class GitStats:
	def run(self, args_orig):
		optlist, args = getopt.getopt(args_orig, 'c:')
		for o,v in optlist:
			if o == '-c':
				key, value = v.split('=', 1)
				if key not in conf:
					raise 'Error: no such key "%s" in config' % key
				if isinstance(conf[key], int):
					conf[key] = int(value)
				else:
					conf[key] = value

		if len(args) < 2:
			print """
Usage: gitstats [options] <gitpath> <outputpath>

Options:
-c key=value     Override configuration value

Default config values:
%s
""" % conf
			sys.exit(0)

		gitpath = args[0]
		outputpath = os.path.abspath(args[1])
		rundir = os.getcwd()

		try:
			os.makedirs(outputpath)
		except OSError:
			pass
		if not os.path.isdir(outputpath):
			print 'FATAL: Output path is not a directory or does not exist'
			sys.exit(1)

		print 'Git path: %s' % gitpath
		print 'Output path: %s' % outputpath

		os.chdir(gitpath)

		cachefile = os.path.join(outputpath, 'gitstats.cache')

		print 'Collecting data...'
		data = GitDataCollector(conf)
		data.loadCache(cachefile)
		data.collect(gitpath)
		print 'Refining data...'
		data.saveCache(cachefile)
		data.refine()

		os.chdir(rundir)

		print 'Generating report...'
		report = HTMLReportCreator(conf)
		report.create(data, outputpath)

		time_end = time.time()
		exectime_internal = time_end - time_start
		exectime_external = CommandLineProcessor.getexectimeexternal()
		print 'Execution time %.5f secs, %.5f secs (%.2f %%) in external commands)' % (exectime_internal, exectime_external, (100.0 * exectime_external) / exectime_internal)

g = GitStats()
g.run(sys.argv[1:])